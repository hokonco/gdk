package generate

import (
	"fmt"
	"os"
	"strings"

	"github.com/hokonco/gdk/util/io"
	"github.com/hokonco/gdk/util/template"
)

// Static ...
func Static(p ParameterStatic) {
	if p.Generate.OutFile == "" {
		p.Generate.OutFile = "gen_static.go"
	}
	if p.Generate.PkgName == "" {
		p.Generate.PkgName = "main"
	}
	if p.Generate.FuncName == "" {
		p.Generate.FuncName = "Static"
	}

	var file *os.File
	var err error
	file, err = os.Create(p.Generate.OutFile)
	die(err)

	defer func() {
		err = file.Close()
		die(err)
	}()

	var mapFileBytes = make(map[string][]byte)
	io.FileWalkDir(func(dir string, file os.FileInfo) {
		if !file.IsDir() {
			k := fmt.Sprintf("%s/%s", dir, file.Name())
			mapFileBytes[k] = io.FileReadBytes(k)
		}
	}, p.Path)

	var sdata []string
	for k, v := range mapFileBytes {
		sdata = append(sdata, fmt.Sprintf("data[`%v`] = %#v", k, v))
	}
	var data = strings.Join(sdata, "\n\t")

	var n int
	n, err = file.WriteString(
		template.Parse(`// Code generated by {{ generator }} at {{ timestamp }}; DO NOT EDIT.
package {{ PkgName }}

func {{ FuncName }}() map[string][]byte {
	data := make(map[string][]byte)
	{{ data }}
	return data
}
`,
			template.Data{
				"PkgName":   p.Generate.PkgName,
				"FuncName":  p.Generate.FuncName,
				"data":      data,
				"generator": generator(),
				"timestamp": timestamp(),
			},
		),
	)
	die(err)

	err = file.Sync()
	die(err)

	fmt.Printf("wrote %d bytes\n", n)
}

// ParameterStatic ...
type ParameterStatic struct {
	Generate ParameterGenerate
	Path     string
}
